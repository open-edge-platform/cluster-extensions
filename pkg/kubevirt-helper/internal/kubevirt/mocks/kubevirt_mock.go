// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	admission "sigs.k8s.io/controller-runtime/pkg/webhook/admission"

	mock "github.com/stretchr/testify/mock"

	v1 "kubevirt.io/api/core/v1"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

// CompareVMSpec provides a mock function with given fields: ctx, vmNew, vmOld
func (_m *MockHandler) CompareVMSpec(ctx context.Context, vmNew *v1.VirtualMachine, vmOld *v1.VirtualMachine) (bool, bool, error) {
	ret := _m.Called(ctx, vmNew, vmOld)

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine, *v1.VirtualMachine) (bool, bool, error)); ok {
		return rf(ctx, vmNew, vmOld)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine, *v1.VirtualMachine) bool); ok {
		r0 = rf(ctx, vmNew, vmOld)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.VirtualMachine, *v1.VirtualMachine) bool); ok {
		r1 = rf(ctx, vmNew, vmOld)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1.VirtualMachine, *v1.VirtualMachine) error); ok {
		r2 = rf(ctx, vmNew, vmOld)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteDV provides a mock function with given fields: ctx, vm
func (_m *MockHandler) DeleteDV(ctx context.Context, vm *v1.VirtualMachine) error {
	ret := _m.Called(ctx, vm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) error); ok {
		r0 = rf(ctx, vm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVMInstance provides a mock function with given fields: ctx, vm
func (_m *MockHandler) DeleteVMInstance(ctx context.Context, vm *v1.VirtualMachine) error {
	ret := _m.Called(ctx, vm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) error); ok {
		r0 = rf(ctx, vm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVMsFromAdmissionRequest provides a mock function with given fields: ctx, r
func (_m *MockHandler) GetVMsFromAdmissionRequest(ctx context.Context, r admission.Request) (*v1.VirtualMachine, *v1.VirtualMachine, error) {
	ret := _m.Called(ctx, r)

	var r0 *v1.VirtualMachine
	var r1 *v1.VirtualMachine
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, admission.Request) (*v1.VirtualMachine, *v1.VirtualMachine, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, admission.Request) *v1.VirtualMachine); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, admission.Request) *v1.VirtualMachine); ok {
		r1 = rf(ctx, r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*v1.VirtualMachine)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, admission.Request) error); ok {
		r2 = rf(ctx, r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RestartVM provides a mock function with given fields: ctx, vm
func (_m *MockHandler) RestartVM(ctx context.Context, vm *v1.VirtualMachine) error {
	ret := _m.Called(ctx, vm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.VirtualMachine) error); ok {
		r0 = rf(ctx, vm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHandler(t mockConstructorTestingTNewMockHandler) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
